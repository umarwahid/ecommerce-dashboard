// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String      // Remove @db.ObjectId if it's not an ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  orders     Order[]
}


model Billboard {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id])
  billboardId String      @db.ObjectId
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String      @db.ObjectId
  store     Store       @relation(fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String      @db.ObjectId
  store     Store       @relation(fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String      @db.ObjectId
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String      @db.ObjectId
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItem  OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  productId String      @db.ObjectId
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @db.ObjectId
  order     Order       @relation(fields: [orderId], references: [id])
  productId String      @db.ObjectId
  product   Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
